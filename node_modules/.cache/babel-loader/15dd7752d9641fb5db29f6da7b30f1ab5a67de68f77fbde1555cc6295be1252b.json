{"ast":null,"code":"var _ = require(\"underscore\");\nvar ast = require(\"./ast\");\nfunction simplify(nodes) {\n  return collapse(removeEmpty(nodes));\n}\nfunction collapse(nodes) {\n  var children = [];\n  nodes.map(collapseNode).forEach(function (child) {\n    appendChild(children, child);\n  });\n  return children;\n}\nfunction collapseNode(node) {\n  return collapsers[node.type](node);\n}\nvar collapsers = {\n  element: collapseElement,\n  text: identity,\n  forceWrite: identity\n};\nfunction collapseElement(node) {\n  return ast.elementWithTag(node.tag, collapse(node.children));\n}\nfunction identity(value) {\n  return value;\n}\nfunction appendChild(children, child) {\n  var lastChild = children[children.length - 1];\n  if (child.type === \"element\" && !child.tag.fresh && lastChild && lastChild.type === \"element\" && child.tag.matchesElement(lastChild.tag)) {\n    if (child.tag.separator) {\n      appendChild(lastChild.children, ast.text(child.tag.separator));\n    }\n    child.children.forEach(function (grandChild) {\n      // Mutation is fine since simplifying elements create a copy of the children.\n      appendChild(lastChild.children, grandChild);\n    });\n  } else {\n    children.push(child);\n  }\n}\nfunction removeEmpty(nodes) {\n  return flatMap(nodes, function (node) {\n    return emptiers[node.type](node);\n  });\n}\nfunction flatMap(values, func) {\n  return _.flatten(_.map(values, func), true);\n}\nvar emptiers = {\n  element: elementEmptier,\n  text: textEmptier,\n  forceWrite: neverEmpty\n};\nfunction neverEmpty(node) {\n  return [node];\n}\nfunction elementEmptier(element) {\n  var children = removeEmpty(element.children);\n  if (children.length === 0 && !ast.isVoidElement(element)) {\n    return [];\n  } else {\n    return [ast.elementWithTag(element.tag, children)];\n  }\n}\nfunction textEmptier(node) {\n  if (node.value.length === 0) {\n    return [];\n  } else {\n    return [node];\n  }\n}\nmodule.exports = simplify;","map":{"version":3,"names":["_","require","ast","simplify","nodes","collapse","removeEmpty","children","map","collapseNode","forEach","child","appendChild","node","collapsers","type","element","collapseElement","text","identity","forceWrite","elementWithTag","tag","value","lastChild","length","fresh","matchesElement","separator","grandChild","push","flatMap","emptiers","values","func","flatten","elementEmptier","textEmptier","neverEmpty","isVoidElement","module","exports"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/node_modules/mammoth/lib/html/simplify.js"],"sourcesContent":["var _ = require(\"underscore\");\n\nvar ast = require(\"./ast\");\n\nfunction simplify(nodes) {\n    return collapse(removeEmpty(nodes));\n}\n\nfunction collapse(nodes) {\n    var children = [];\n    \n    nodes.map(collapseNode).forEach(function(child) {\n        appendChild(children, child);\n    });\n    return children;\n}\n\nfunction collapseNode(node) {\n    return collapsers[node.type](node);\n}\n\nvar collapsers = {\n    element: collapseElement,\n    text: identity,\n    forceWrite: identity\n};\n\nfunction collapseElement(node) {\n    return ast.elementWithTag(node.tag, collapse(node.children));\n}\n\nfunction identity(value) {\n    return value;\n}\n\nfunction appendChild(children, child) {\n    var lastChild = children[children.length - 1];\n    if (child.type === \"element\" && !child.tag.fresh && lastChild && lastChild.type === \"element\" && child.tag.matchesElement(lastChild.tag)) {\n        if (child.tag.separator) {\n            appendChild(lastChild.children, ast.text(child.tag.separator));\n        }\n        child.children.forEach(function(grandChild) {\n            // Mutation is fine since simplifying elements create a copy of the children.\n            appendChild(lastChild.children, grandChild);\n        });\n    } else {\n        children.push(child);\n    }\n}\n\nfunction removeEmpty(nodes) {\n    return flatMap(nodes, function(node) {\n        return emptiers[node.type](node);\n    });\n}\n\nfunction flatMap(values, func) {\n    return _.flatten(_.map(values, func), true);\n}\n\nvar emptiers = {\n    element: elementEmptier,\n    text: textEmptier,\n    forceWrite: neverEmpty\n};\n\nfunction neverEmpty(node) {\n    return [node];\n}\n\nfunction elementEmptier(element) {\n    var children = removeEmpty(element.children);\n    if (children.length === 0 && !ast.isVoidElement(element)) {\n        return [];\n    } else {\n        return [ast.elementWithTag(element.tag, children)];\n    }\n}\n\nfunction textEmptier(node) {\n    if (node.value.length === 0) {\n        return [];\n    } else {\n        return [node];\n    }\n}\n\nmodule.exports = simplify;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}