{"ast":null,"code":"var lop = require(\"lop\");\nvar RegexTokeniser = lop.RegexTokeniser;\nexports.tokenise = tokenise;\nvar stringPrefix = \"'((?:\\\\\\\\.|[^'])*)\";\nfunction tokenise(string) {\n  var identifierCharacter = \"(?:[a-zA-Z\\\\-_]|\\\\\\\\.)\";\n  var tokeniser = new RegexTokeniser([{\n    name: \"identifier\",\n    regex: new RegExp(\"(\" + identifierCharacter + \"(?:\" + identifierCharacter + \"|[0-9])*)\")\n  }, {\n    name: \"dot\",\n    regex: /\\./\n  }, {\n    name: \"colon\",\n    regex: /:/\n  }, {\n    name: \"gt\",\n    regex: />/\n  }, {\n    name: \"whitespace\",\n    regex: /\\s+/\n  }, {\n    name: \"arrow\",\n    regex: /=>/\n  }, {\n    name: \"equals\",\n    regex: /=/\n  }, {\n    name: \"startsWith\",\n    regex: /\\^=/\n  }, {\n    name: \"open-paren\",\n    regex: /\\(/\n  }, {\n    name: \"close-paren\",\n    regex: /\\)/\n  }, {\n    name: \"open-square-bracket\",\n    regex: /\\[/\n  }, {\n    name: \"close-square-bracket\",\n    regex: /\\]/\n  }, {\n    name: \"string\",\n    regex: new RegExp(stringPrefix + \"'\")\n  }, {\n    name: \"unterminated-string\",\n    regex: new RegExp(stringPrefix)\n  }, {\n    name: \"integer\",\n    regex: /([0-9]+)/\n  }, {\n    name: \"choice\",\n    regex: /\\|/\n  }, {\n    name: \"bang\",\n    regex: /(!)/\n  }]);\n  return tokeniser.tokenise(string);\n}","map":{"version":3,"names":["lop","require","RegexTokeniser","exports","tokenise","stringPrefix","string","identifierCharacter","tokeniser","name","regex","RegExp"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/node_modules/mammoth/lib/styles/parser/tokeniser.js"],"sourcesContent":["var lop = require(\"lop\");\nvar RegexTokeniser = lop.RegexTokeniser;\n\nexports.tokenise = tokenise;\n\nvar stringPrefix = \"'((?:\\\\\\\\.|[^'])*)\";\n\nfunction tokenise(string) {\n    var identifierCharacter = \"(?:[a-zA-Z\\\\-_]|\\\\\\\\.)\";\n    var tokeniser = new RegexTokeniser([\n        {name: \"identifier\", regex: new RegExp(\"(\" + identifierCharacter + \"(?:\" + identifierCharacter + \"|[0-9])*)\")},\n        {name: \"dot\", regex: /\\./},\n        {name: \"colon\", regex: /:/},\n        {name: \"gt\", regex: />/},\n        {name: \"whitespace\", regex: /\\s+/},\n        {name: \"arrow\", regex: /=>/},\n        {name: \"equals\", regex: /=/},\n        {name: \"startsWith\", regex: /\\^=/},\n        {name: \"open-paren\", regex: /\\(/},\n        {name: \"close-paren\", regex: /\\)/},\n        {name: \"open-square-bracket\", regex: /\\[/},\n        {name: \"close-square-bracket\", regex: /\\]/},\n        {name: \"string\", regex: new RegExp(stringPrefix + \"'\")},\n        {name: \"unterminated-string\", regex: new RegExp(stringPrefix)},\n        {name: \"integer\", regex: /([0-9]+)/},\n        {name: \"choice\", regex: /\\|/},\n        {name: \"bang\", regex: /(!)/}\n    ]);\n    return tokeniser.tokenise(string);\n}\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AACxB,IAAIC,cAAc,GAAGF,GAAG,CAACE,cAAc;AAEvCC,OAAO,CAACC,QAAQ,GAAGA,QAAQ;AAE3B,IAAIC,YAAY,GAAG,oBAAoB;AAEvC,SAASD,QAAQA,CAACE,MAAM,EAAE;EACtB,IAAIC,mBAAmB,GAAG,wBAAwB;EAClD,IAAIC,SAAS,GAAG,IAAIN,cAAc,CAAC,CAC/B;IAACO,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE,IAAIC,MAAM,CAAC,GAAG,GAAGJ,mBAAmB,GAAG,KAAK,GAAGA,mBAAmB,GAAG,WAAW;EAAC,CAAC,EAC9G;IAACE,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC1B;IAACD,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAG,CAAC,EAC3B;IAACD,IAAI,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAG,CAAC,EACxB;IAACD,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE;EAAK,CAAC,EAClC;IAACD,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC5B;IAACD,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAG,CAAC,EAC5B;IAACD,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE;EAAK,CAAC,EAClC;IAACD,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE;EAAI,CAAC,EACjC;IAACD,IAAI,EAAE,aAAa;IAAEC,KAAK,EAAE;EAAI,CAAC,EAClC;IAACD,IAAI,EAAE,qBAAqB;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC1C;IAACD,IAAI,EAAE,sBAAsB;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC3C;IAACD,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE,IAAIC,MAAM,CAACN,YAAY,GAAG,GAAG;EAAC,CAAC,EACvD;IAACI,IAAI,EAAE,qBAAqB;IAAEC,KAAK,EAAE,IAAIC,MAAM,CAACN,YAAY;EAAC,CAAC,EAC9D;IAACI,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAU,CAAC,EACpC;IAACD,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC7B;IAACD,IAAI,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC,CAC/B,CAAC;EACF,OAAOF,SAAS,CAACJ,QAAQ,CAACE,MAAM,CAAC;AACrC"},"metadata":{},"sourceType":"script","externalDependencies":[]}