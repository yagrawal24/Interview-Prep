{"ast":null,"code":"var _jsxFileName = \"/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { sendMessageToAI } from './utils/GptAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isInitialized, setIsInitialized] = useState(false);\n  useEffect(() => {\n    if (!isInitialized) {\n      const initialContext = {\n        \"role\": \"system\",\n        \"content\": \"You are acting as an interviewer for a software engineering role. Please ask a behavioral focused question.\"\n      };\n      gptCall([initialContext]);\n      setIsInitialized(true); // Set flag to prevent re-initialization\n    }\n  }, [isInitialized]); // Dependency on isInitialized\n\n  const gptCall = async newMessages => {\n    try {\n      const responseText = await sendMessageToAI(newMessages);\n      setMessages(prevMessages => [...prevMessages, {\n        \"role\": \"system\",\n        \"content\": responseText\n      }]);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      const updatedMessages = [...messages, {\n        \"role\": \"user\",\n        \"content\": newMessage\n      }];\n      gptCall(updatedMessages);\n      setNewMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.role === \"user\" ? 'user-message' : 'ai-message',\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your message...\",\n      value: newMessage,\n      onChange: e => setNewMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"YexhPHIHU9/jT89CgU7YpzGOb5U=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","sendMessageToAI","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","newMessage","setNewMessage","isInitialized","setIsInitialized","initialContext","gptCall","newMessages","responseText","prevMessages","error","console","handleSendMessage","trim","updatedMessages","children","className","map","message","index","role","content","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { sendMessageToAI } from './utils/GptAPI';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    if (!isInitialized) {\n      const initialContext = {\n        \"role\": \"system\",\n        \"content\": \"You are acting as an interviewer for a software engineering role. Please ask a behavioral focused question.\"\n      };\n      gptCall([initialContext]);\n      setIsInitialized(true); // Set flag to prevent re-initialization\n    }\n  }, [isInitialized]); // Dependency on isInitialized\n\n  const gptCall = async (newMessages) => {\n    try {\n      const responseText = await sendMessageToAI(newMessages);\n      setMessages(prevMessages => [...prevMessages, { \"role\": \"system\", \"content\": responseText }]);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  }\n\n  const handleSendMessage = () => {\n    if (newMessage.trim()) {\n      const updatedMessages = [...messages, { \"role\": \"user\", \"content\": newMessage }];\n      gptCall(updatedMessages);\n      setNewMessage('');\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div key={index} className={message.role === \"user\" ? 'user-message' : 'ai-message'}>\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Type your message...\"\n        value={newMessage}\n        onChange={(e) => setNewMessage(e.target.value)}\n      />\n      <button className=\"chat-button\" onClick={handleSendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEzDC,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,aAAa,EAAE;MAClB,MAAME,cAAc,GAAG;QACrB,MAAM,EAAE,QAAQ;QAChB,SAAS,EAAE;MACb,CAAC;MACDC,OAAO,CAAC,CAACD,cAAc,CAAC,CAAC;MACzBD,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACD,aAAa,CAAC,CAAC,CAAC,CAAC;;EAErB,MAAMG,OAAO,GAAG,MAAOC,WAAW,IAAK;IACrC,IAAI;MACF,MAAMC,YAAY,GAAG,MAAMd,eAAe,CAACa,WAAW,CAAC;MACvDP,WAAW,CAACS,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAE,MAAM,EAAE,QAAQ;QAAE,SAAS,EAAED;MAAa,CAAC,CAAC,CAAC;IAC/F,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIX,UAAU,CAACY,IAAI,CAAC,CAAC,EAAE;MACrB,MAAMC,eAAe,GAAG,CAAC,GAAGf,QAAQ,EAAE;QAAE,MAAM,EAAE,MAAM;QAAE,SAAS,EAAEE;MAAW,CAAC,CAAC;MAChFK,OAAO,CAACQ,eAAe,CAAC;MACxBZ,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;EAED,oBACEN,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAKoB,SAAS,EAAC,gBAAgB;MAAAD,QAAA,EAC5BhB,QAAQ,CAACkB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BvB,OAAA;QAAiBoB,SAAS,EAAEE,OAAO,CAACE,IAAI,KAAK,MAAM,GAAG,cAAc,GAAG,YAAa;QAAAL,QAAA,EACjFG,OAAO,CAACG;MAAO,GADRF,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN7B,OAAA;MACE8B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,sBAAsB;MAClCC,KAAK,EAAE3B,UAAW;MAClB4B,QAAQ,EAAGC,CAAC,IAAK5B,aAAa,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACF7B,OAAA;MAAQoB,SAAS,EAAC,aAAa;MAACgB,OAAO,EAAEpB,iBAAkB;MAAAG,QAAA,EAAC;IAAI;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAnDID,OAAO;AAAAoC,EAAA,GAAPpC,OAAO;AAqDb,eAAeA,OAAO;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}