{"ast":null,"code":"exports.readContentTypesFromXml = readContentTypesFromXml;\nvar fallbackContentTypes = {\n  \"png\": \"png\",\n  \"gif\": \"gif\",\n  \"jpeg\": \"jpeg\",\n  \"jpg\": \"jpeg\",\n  \"tif\": \"tiff\",\n  \"tiff\": \"tiff\",\n  \"bmp\": \"bmp\"\n};\nexports.defaultContentTypes = contentTypes({}, {});\nfunction readContentTypesFromXml(element) {\n  var extensionDefaults = {};\n  var overrides = {};\n  element.children.forEach(function (child) {\n    if (child.name === \"content-types:Default\") {\n      extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;\n    }\n    if (child.name === \"content-types:Override\") {\n      var name = child.attributes.PartName;\n      if (name.charAt(0) === \"/\") {\n        name = name.substring(1);\n      }\n      overrides[name] = child.attributes.ContentType;\n    }\n  });\n  return contentTypes(overrides, extensionDefaults);\n}\nfunction contentTypes(overrides, extensionDefaults) {\n  return {\n    findContentType: function (path) {\n      var overrideContentType = overrides[path];\n      if (overrideContentType) {\n        return overrideContentType;\n      } else {\n        var pathParts = path.split(\".\");\n        var extension = pathParts[pathParts.length - 1];\n        if (extensionDefaults.hasOwnProperty(extension)) {\n          return extensionDefaults[extension];\n        } else {\n          var fallback = fallbackContentTypes[extension.toLowerCase()];\n          if (fallback) {\n            return \"image/\" + fallback;\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["exports","readContentTypesFromXml","fallbackContentTypes","defaultContentTypes","contentTypes","element","extensionDefaults","overrides","children","forEach","child","name","attributes","Extension","ContentType","PartName","charAt","substring","findContentType","path","overrideContentType","pathParts","split","extension","length","hasOwnProperty","fallback","toLowerCase"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/node_modules/mammoth/lib/docx/content-types-reader.js"],"sourcesContent":["exports.readContentTypesFromXml = readContentTypesFromXml;\n\nvar fallbackContentTypes = {\n    \"png\": \"png\",\n    \"gif\": \"gif\",\n    \"jpeg\": \"jpeg\",\n    \"jpg\": \"jpeg\",\n    \"tif\": \"tiff\",\n    \"tiff\": \"tiff\",\n    \"bmp\": \"bmp\"\n};\n\nexports.defaultContentTypes = contentTypes({}, {});\n\n\nfunction readContentTypesFromXml(element) {\n    var extensionDefaults = {};\n    var overrides = {};\n    \n    element.children.forEach(function(child) {\n        if (child.name === \"content-types:Default\") {\n            extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;\n        }\n        if (child.name === \"content-types:Override\") {\n            var name = child.attributes.PartName;\n            if (name.charAt(0) === \"/\") {\n                name = name.substring(1);\n            }\n            overrides[name] = child.attributes.ContentType;\n        }\n    });\n    return contentTypes(overrides, extensionDefaults);\n}\n\nfunction contentTypes(overrides, extensionDefaults) {\n    return {\n        findContentType: function(path) {\n            var overrideContentType = overrides[path];\n            if (overrideContentType) {\n                return overrideContentType;\n            } else {\n                var pathParts = path.split(\".\");\n                var extension = pathParts[pathParts.length - 1];\n                if (extensionDefaults.hasOwnProperty(extension)) {\n                    return extensionDefaults[extension];\n                } else {\n                    var fallback = fallbackContentTypes[extension.toLowerCase()];\n                    if (fallback) {\n                        return \"image/\" + fallback;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n    };\n    \n}\n"],"mappings":"AAAAA,OAAO,CAACC,uBAAuB,GAAGA,uBAAuB;AAEzD,IAAIC,oBAAoB,GAAG;EACvB,KAAK,EAAE,KAAK;EACZ,KAAK,EAAE,KAAK;EACZ,MAAM,EAAE,MAAM;EACd,KAAK,EAAE,MAAM;EACb,KAAK,EAAE,MAAM;EACb,MAAM,EAAE,MAAM;EACd,KAAK,EAAE;AACX,CAAC;AAEDF,OAAO,CAACG,mBAAmB,GAAGC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAGlD,SAASH,uBAAuBA,CAACI,OAAO,EAAE;EACtC,IAAIC,iBAAiB,GAAG,CAAC,CAAC;EAC1B,IAAIC,SAAS,GAAG,CAAC,CAAC;EAElBF,OAAO,CAACG,QAAQ,CAACC,OAAO,CAAC,UAASC,KAAK,EAAE;IACrC,IAAIA,KAAK,CAACC,IAAI,KAAK,uBAAuB,EAAE;MACxCL,iBAAiB,CAACI,KAAK,CAACE,UAAU,CAACC,SAAS,CAAC,GAAGH,KAAK,CAACE,UAAU,CAACE,WAAW;IAChF;IACA,IAAIJ,KAAK,CAACC,IAAI,KAAK,wBAAwB,EAAE;MACzC,IAAIA,IAAI,GAAGD,KAAK,CAACE,UAAU,CAACG,QAAQ;MACpC,IAAIJ,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACxBL,IAAI,GAAGA,IAAI,CAACM,SAAS,CAAC,CAAC,CAAC;MAC5B;MACAV,SAAS,CAACI,IAAI,CAAC,GAAGD,KAAK,CAACE,UAAU,CAACE,WAAW;IAClD;EACJ,CAAC,CAAC;EACF,OAAOV,YAAY,CAACG,SAAS,EAAED,iBAAiB,CAAC;AACrD;AAEA,SAASF,YAAYA,CAACG,SAAS,EAAED,iBAAiB,EAAE;EAChD,OAAO;IACHY,eAAe,EAAE,SAAAA,CAASC,IAAI,EAAE;MAC5B,IAAIC,mBAAmB,GAAGb,SAAS,CAACY,IAAI,CAAC;MACzC,IAAIC,mBAAmB,EAAE;QACrB,OAAOA,mBAAmB;MAC9B,CAAC,MAAM;QACH,IAAIC,SAAS,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;QAC/B,IAAIC,SAAS,GAAGF,SAAS,CAACA,SAAS,CAACG,MAAM,GAAG,CAAC,CAAC;QAC/C,IAAIlB,iBAAiB,CAACmB,cAAc,CAACF,SAAS,CAAC,EAAE;UAC7C,OAAOjB,iBAAiB,CAACiB,SAAS,CAAC;QACvC,CAAC,MAAM;UACH,IAAIG,QAAQ,GAAGxB,oBAAoB,CAACqB,SAAS,CAACI,WAAW,CAAC,CAAC,CAAC;UAC5D,IAAID,QAAQ,EAAE;YACV,OAAO,QAAQ,GAAGA,QAAQ;UAC9B,CAAC,MAAM;YACH,OAAO,IAAI;UACf;QACJ;MACJ;IACJ;EACJ,CAAC;AAEL"},"metadata":{},"sourceType":"script","externalDependencies":[]}