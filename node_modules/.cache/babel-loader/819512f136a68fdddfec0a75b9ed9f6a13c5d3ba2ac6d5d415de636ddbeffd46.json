{"ast":null,"code":"var base64js = require(\"base64-js\");\nvar JSZip = require(\"jszip\");\nexports.openArrayBuffer = openArrayBuffer;\nexports.splitPath = splitPath;\nexports.joinPath = joinPath;\nfunction openArrayBuffer(arrayBuffer) {\n  return JSZip.loadAsync(arrayBuffer).then(function (zipFile) {\n    function exists(name) {\n      return zipFile.file(name) !== null;\n    }\n    function read(name, encoding) {\n      return zipFile.file(name).async(\"uint8array\").then(function (array) {\n        if (encoding === \"base64\") {\n          return base64js.fromByteArray(array);\n        } else if (encoding) {\n          var decoder = new TextDecoder(encoding);\n          return decoder.decode(array);\n        } else {\n          return array;\n        }\n      });\n    }\n    function write(name, contents) {\n      zipFile.file(name, contents);\n    }\n    function toArrayBuffer() {\n      return zipFile.generateAsync({\n        type: \"arraybuffer\"\n      });\n    }\n    return {\n      exists: exists,\n      read: read,\n      write: write,\n      toArrayBuffer: toArrayBuffer\n    };\n  });\n}\nfunction splitPath(path) {\n  var lastIndex = path.lastIndexOf(\"/\");\n  if (lastIndex === -1) {\n    return {\n      dirname: \"\",\n      basename: path\n    };\n  } else {\n    return {\n      dirname: path.substring(0, lastIndex),\n      basename: path.substring(lastIndex + 1)\n    };\n  }\n}\nfunction joinPath() {\n  var nonEmptyPaths = Array.prototype.filter.call(arguments, function (path) {\n    return path;\n  });\n  var relevantPaths = [];\n  nonEmptyPaths.forEach(function (path) {\n    if (/^\\//.test(path)) {\n      relevantPaths = [path];\n    } else {\n      relevantPaths.push(path);\n    }\n  });\n  return relevantPaths.join(\"/\");\n}","map":{"version":3,"names":["base64js","require","JSZip","exports","openArrayBuffer","splitPath","joinPath","arrayBuffer","loadAsync","then","zipFile","exists","name","file","read","encoding","async","array","fromByteArray","decoder","TextDecoder","decode","write","contents","toArrayBuffer","generateAsync","type","path","lastIndex","lastIndexOf","dirname","basename","substring","nonEmptyPaths","Array","prototype","filter","call","arguments","relevantPaths","forEach","test","push","join"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/node_modules/mammoth/lib/zipfile.js"],"sourcesContent":["var base64js = require(\"base64-js\");\nvar JSZip = require(\"jszip\");\n\nexports.openArrayBuffer = openArrayBuffer;\nexports.splitPath = splitPath;\nexports.joinPath = joinPath;\n\nfunction openArrayBuffer(arrayBuffer) {\n    return JSZip.loadAsync(arrayBuffer).then(function(zipFile) {\n        function exists(name) {\n            return zipFile.file(name) !== null;\n        }\n\n        function read(name, encoding) {\n            return zipFile.file(name).async(\"uint8array\").then(function(array) {\n                if (encoding === \"base64\") {\n                    return base64js.fromByteArray(array);\n                } else if (encoding) {\n                    var decoder = new TextDecoder(encoding);\n                    return decoder.decode(array);\n                } else {\n                    return array;\n                }\n            });\n        }\n\n        function write(name, contents) {\n            zipFile.file(name, contents);\n        }\n\n        function toArrayBuffer() {\n            return zipFile.generateAsync({type: \"arraybuffer\"});\n        }\n\n        return {\n            exists: exists,\n            read: read,\n            write: write,\n            toArrayBuffer: toArrayBuffer\n        };\n    });\n}\n\nfunction splitPath(path) {\n    var lastIndex = path.lastIndexOf(\"/\");\n    if (lastIndex === -1) {\n        return {dirname: \"\", basename: path};\n    } else {\n        return {\n            dirname: path.substring(0, lastIndex),\n            basename: path.substring(lastIndex + 1)\n        };\n    }\n}\n\nfunction joinPath() {\n    var nonEmptyPaths = Array.prototype.filter.call(arguments, function(path) {\n        return path;\n    });\n\n    var relevantPaths = [];\n\n    nonEmptyPaths.forEach(function(path) {\n        if (/^\\//.test(path)) {\n            relevantPaths = [path];\n        } else {\n            relevantPaths.push(path);\n        }\n    });\n\n    return relevantPaths.join(\"/\");\n}\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACnC,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAE5BE,OAAO,CAACC,eAAe,GAAGA,eAAe;AACzCD,OAAO,CAACE,SAAS,GAAGA,SAAS;AAC7BF,OAAO,CAACG,QAAQ,GAAGA,QAAQ;AAE3B,SAASF,eAAeA,CAACG,WAAW,EAAE;EAClC,OAAOL,KAAK,CAACM,SAAS,CAACD,WAAW,CAAC,CAACE,IAAI,CAAC,UAASC,OAAO,EAAE;IACvD,SAASC,MAAMA,CAACC,IAAI,EAAE;MAClB,OAAOF,OAAO,CAACG,IAAI,CAACD,IAAI,CAAC,KAAK,IAAI;IACtC;IAEA,SAASE,IAAIA,CAACF,IAAI,EAAEG,QAAQ,EAAE;MAC1B,OAAOL,OAAO,CAACG,IAAI,CAACD,IAAI,CAAC,CAACI,KAAK,CAAC,YAAY,CAAC,CAACP,IAAI,CAAC,UAASQ,KAAK,EAAE;QAC/D,IAAIF,QAAQ,KAAK,QAAQ,EAAE;UACvB,OAAOf,QAAQ,CAACkB,aAAa,CAACD,KAAK,CAAC;QACxC,CAAC,MAAM,IAAIF,QAAQ,EAAE;UACjB,IAAII,OAAO,GAAG,IAAIC,WAAW,CAACL,QAAQ,CAAC;UACvC,OAAOI,OAAO,CAACE,MAAM,CAACJ,KAAK,CAAC;QAChC,CAAC,MAAM;UACH,OAAOA,KAAK;QAChB;MACJ,CAAC,CAAC;IACN;IAEA,SAASK,KAAKA,CAACV,IAAI,EAAEW,QAAQ,EAAE;MAC3Bb,OAAO,CAACG,IAAI,CAACD,IAAI,EAAEW,QAAQ,CAAC;IAChC;IAEA,SAASC,aAAaA,CAAA,EAAG;MACrB,OAAOd,OAAO,CAACe,aAAa,CAAC;QAACC,IAAI,EAAE;MAAa,CAAC,CAAC;IACvD;IAEA,OAAO;MACHf,MAAM,EAAEA,MAAM;MACdG,IAAI,EAAEA,IAAI;MACVQ,KAAK,EAAEA,KAAK;MACZE,aAAa,EAAEA;IACnB,CAAC;EACL,CAAC,CAAC;AACN;AAEA,SAASnB,SAASA,CAACsB,IAAI,EAAE;EACrB,IAAIC,SAAS,GAAGD,IAAI,CAACE,WAAW,CAAC,GAAG,CAAC;EACrC,IAAID,SAAS,KAAK,CAAC,CAAC,EAAE;IAClB,OAAO;MAACE,OAAO,EAAE,EAAE;MAAEC,QAAQ,EAAEJ;IAAI,CAAC;EACxC,CAAC,MAAM;IACH,OAAO;MACHG,OAAO,EAAEH,IAAI,CAACK,SAAS,CAAC,CAAC,EAAEJ,SAAS,CAAC;MACrCG,QAAQ,EAAEJ,IAAI,CAACK,SAAS,CAACJ,SAAS,GAAG,CAAC;IAC1C,CAAC;EACL;AACJ;AAEA,SAAStB,QAAQA,CAAA,EAAG;EAChB,IAAI2B,aAAa,GAAGC,KAAK,CAACC,SAAS,CAACC,MAAM,CAACC,IAAI,CAACC,SAAS,EAAE,UAASX,IAAI,EAAE;IACtE,OAAOA,IAAI;EACf,CAAC,CAAC;EAEF,IAAIY,aAAa,GAAG,EAAE;EAEtBN,aAAa,CAACO,OAAO,CAAC,UAASb,IAAI,EAAE;IACjC,IAAI,KAAK,CAACc,IAAI,CAACd,IAAI,CAAC,EAAE;MAClBY,aAAa,GAAG,CAACZ,IAAI,CAAC;IAC1B,CAAC,MAAM;MACHY,aAAa,CAACG,IAAI,CAACf,IAAI,CAAC;IAC5B;EACJ,CAAC,CAAC;EAEF,OAAOY,aAAa,CAACI,IAAI,CAAC,GAAG,CAAC;AAClC"},"metadata":{},"sourceType":"script","externalDependencies":[]}