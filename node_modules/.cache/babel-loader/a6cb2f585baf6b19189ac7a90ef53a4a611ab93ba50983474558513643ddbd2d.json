{"ast":null,"code":"var _jsxFileName = \"/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { sendMessageToAI } from './utils/GptAPI';\n//import VoiceToText, { sendTranscriptToBackend } from './components/VoiceToText.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = ({\n  setTranscript,\n  userSpeech,\n  setConversation,\n  interviewInProgress\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    if (!interviewInProgress) {\n      // Concatenate all messages into a single conversation string\n      const conversationString = messages.map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`).join('\\n');\n      // Call setFullConversation with this string\n      setFullConversation(conversationString);\n    }\n  }, [interviewInProgress, messages, setFullConversation]);\n  useEffect(() => {\n    if (userSpeech) {\n      // Automatically click the button when userSpeech is not empty\n      console.log('user speech in gpt: ' + userSpeech);\n      setNewMessage(userSpeech);\n    }\n  }, [userSpeech]);\n  useEffect(() => {\n    // Only call handleSendMessage when newMessage changes\n    if (newMessage) {\n      console.log('new message in gpt: ' + newMessage);\n      handleSendMessage();\n    }\n  }, [newMessage]);\n  useEffect(() => {\n    const initialContext = {\n      \"role\": \"system\",\n      \"content\": \"You are an interviewer for a major Software Engineering company.\" + \" You are here today to assess the user on their behavior through a behavioral test. ONLY act as the interviewer and AWAIT THEIR MESSAGE.\" + \" Start with asking their introduction. No need to say you are the interviewer, we know.\"\n    };\n    gptCall([initialContext]);\n  }, []);\n  const gptCall = async newMessages => {\n    try {\n      const responseText = await sendMessageToAI(newMessages);\n      setMessages([...newMessages, {\n        \"role\": \"assistant\",\n        \"content\": responseText\n      }]);\n      console.log(messages);\n      setTranscript(responseText);\n      document.getElementById('generate-audio-button').click();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (newMessage.trim()) {\n      const updatedMessages = [...messages, {\n        \"role\": \"user\",\n        \"content\": newMessage\n      }];\n      gptCall(updatedMessages);\n      setNewMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.role === \"user\" ? 'user-message' : 'ai-message',\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your message...\",\n      value: userSpeech,\n      onChange: e => setNewMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"vh8oQqYNfYH2Vko/szXpCSTCF30=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","sendMessageToAI","jsxDEV","_jsxDEV","ChatBox","setTranscript","userSpeech","setConversation","interviewInProgress","_s","messages","setMessages","newMessage","setNewMessage","conversationString","map","msg","role","content","join","setFullConversation","console","log","handleSendMessage","initialContext","gptCall","newMessages","responseText","document","getElementById","click","error","trim","updatedMessages","children","className","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/ChatBox.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { sendMessageToAI } from './utils/GptAPI';\n//import VoiceToText, { sendTranscriptToBackend } from './components/VoiceToText.jsx';\n\nconst ChatBox = ({ setTranscript, userSpeech, setConversation, interviewInProgress }) => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n  useEffect(() => {\n    if (!interviewInProgress) {\n      // Concatenate all messages into a single conversation string\n      const conversationString = messages.map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`).join('\\n');\n      // Call setFullConversation with this string\n      setFullConversation(conversationString);\n    }\n  }, [interviewInProgress, messages, setFullConversation]);\n\n  useEffect(() => {\n    if (userSpeech) {\n      // Automatically click the button when userSpeech is not empty\n      console.log('user speech in gpt: ' + userSpeech);\n      setNewMessage(userSpeech);\n    }\n  }, [userSpeech]);\n  \n  useEffect(() => {\n    // Only call handleSendMessage when newMessage changes\n    if (newMessage) {\n      console.log('new message in gpt: ' + newMessage);\n      handleSendMessage();\n    }\n  }, [newMessage]);\n\n  useEffect(() => {\n    const initialContext = {\n      \"role\": \"system\",\n      \"content\": \"You are an interviewer for a major Software Engineering company.\" + \n      \" You are here today to assess the user on their behavior through a behavioral test. ONLY act as the interviewer and AWAIT THEIR MESSAGE.\" +\n      \" Start with asking their introduction. No need to say you are the interviewer, we know.\"\n    };\n    gptCall([initialContext]); \n  }, []);\n\n  const gptCall = async (newMessages) => {\n    try {\n      const responseText = await sendMessageToAI(newMessages);\n      setMessages([...newMessages, { \"role\": \"assistant\", \"content\": responseText }]);\n      console.log(messages);\n\n      setTranscript(responseText);\n\n      document.getElementById('generate-audio-button').click();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  }\n\n  const handleSendMessage = async () => {\n    if (newMessage.trim()) {\n      const updatedMessages = [...messages, { \"role\": \"user\", \"content\": newMessage }];\n      gptCall(updatedMessages);\n      setNewMessage('');\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div key={index} className={message.role === \"user\" ? 'user-message' : 'ai-message'}>\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Type your message...\"\n        value={userSpeech}\n        onChange={(e) => setNewMessage(e.target.value)}\n      />\n      <button className=\"chat-button\" onClick={handleSendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}