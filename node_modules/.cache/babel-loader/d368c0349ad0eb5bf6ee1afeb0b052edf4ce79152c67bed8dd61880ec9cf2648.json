{"ast":null,"code":"var _jsxFileName = \"/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/components/Evaluation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { sendMessageToAI } from \"../utils/GptAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Evaluation = ({\n  messages\n}) => {\n  _s();\n  const [gptMessages, setGptMessages] = useState([]);\n  useEffect(() => {\n    // Function to format messages as a transcript\n    const createTranscript = messages => {\n      // Map over the messages and create a string for each\n      return messages.slice(1).map(msg => `${msg.role}: ${msg.content}`).join('\\n');\n    };\n\n    // Get the transcript string\n    const transcript = createTranscript(messages);\n    console.log('Transcript:', transcript);\n    const initialContext = {\n      \"role\": \"system\",\n      \"content\": \"You are a senior software developer at a large software company.\" + \" Evaluate the interview. Wait for the interview transcript to be given.\"\n      //   \" You are here today to assess the user on their behavior through a behavioral test. ONLY act as the interviewer and AWAIT THEIR MESSAGE.\" +\n      //   \" Start with asking their introduction. No need to say you are the interviewer, we know.\"\n    };\n\n    const interviewTranscript = {\n      \"role\": \"user\",\n      \"content\": transcript\n    };\n    setGptMessages(gptCall([initialContext, interviewTranscript]));\n  }, []);\n  const gptCall = async newMessages => {\n    try {\n      const responseText = await sendMessageToAI(newMessages);\n      return responseText;\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gptMessages.content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(Evaluation, \"Dn79Q5ukOzigFsHEYfdv3vflEmA=\");\n_c = Evaluation;\nexport default Evaluation;\nvar _c;\n$RefreshReg$(_c, \"Evaluation\");","map":{"version":3,"names":["React","useState","useEffect","sendMessageToAI","jsxDEV","_jsxDEV","Evaluation","messages","_s","gptMessages","setGptMessages","createTranscript","slice","map","msg","role","content","join","transcript","console","log","initialContext","interviewTranscript","gptCall","newMessages","responseText","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/components/Evaluation.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { sendMessageToAI } from \"../utils/GptAPI\";\n\nconst Evaluation = ({messages}) => {\n    const [gptMessages, setGptMessages] = useState([]);\n\n    useEffect(() => {\n        // Function to format messages as a transcript\n        const createTranscript = (messages) => {\n            // Map over the messages and create a string for each\n            return messages.slice(1).map((msg) => `${msg.role}: ${msg.content}`).join('\\n');\n        };\n    \n        // Get the transcript string\n        const transcript = createTranscript(messages);\n        console.log('Transcript:', transcript);\n\n        const initialContext = {\n          \"role\": \"system\",\n          \"content\": \"You are a senior software developer at a large software company.\" + \n          \" Evaluate the interview. Wait for the interview transcript to be given.\"\n        //   \" You are here today to assess the user on their behavior through a behavioral test. ONLY act as the interviewer and AWAIT THEIR MESSAGE.\" +\n        //   \" Start with asking their introduction. No need to say you are the interviewer, we know.\"\n        };\n        const interviewTranscript = {\n            \"role\": \"user\",\n            \"content\": transcript\n        }\n\n        setGptMessages(gptCall([initialContext, interviewTranscript]))\n    }, []);\n    \n\n    const gptCall = async (newMessages) => {\n        try {\n            const responseText = await sendMessageToAI(newMessages);\n            return responseText\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    }\n\n    return (\n        <div>\n            {gptMessages.content}\n        </div>\n    );\n};\n\nexport default Evaluation;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,SAASC,eAAe,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,UAAU,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMS,gBAAgB,GAAIJ,QAAQ,IAAK;MACnC;MACA,OAAOA,QAAQ,CAACK,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAM,GAAEA,GAAG,CAACC,IAAK,KAAID,GAAG,CAACE,OAAQ,EAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACnF,CAAC;;IAED;IACA,MAAMC,UAAU,GAAGP,gBAAgB,CAACJ,QAAQ,CAAC;IAC7CY,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,UAAU,CAAC;IAEtC,MAAMG,cAAc,GAAG;MACrB,MAAM,EAAE,QAAQ;MAChB,SAAS,EAAE,kEAAkE,GAC7E;MACF;MACA;IACA,CAAC;;IACD,MAAMC,mBAAmB,GAAG;MACxB,MAAM,EAAE,MAAM;MACd,SAAS,EAAEJ;IACf,CAAC;IAEDR,cAAc,CAACa,OAAO,CAAC,CAACF,cAAc,EAAEC,mBAAmB,CAAC,CAAC,CAAC;EAClE,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMC,OAAO,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACA,MAAMC,YAAY,GAAG,MAAMtB,eAAe,CAACqB,WAAW,CAAC;MACvD,OAAOC,YAAY;IACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZP,OAAO,CAACO,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACIrB,OAAA;IAAAsB,QAAA,EACKlB,WAAW,CAACO;EAAO;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEd,CAAC;AAACvB,EAAA,CA5CIF,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AA8ChB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}