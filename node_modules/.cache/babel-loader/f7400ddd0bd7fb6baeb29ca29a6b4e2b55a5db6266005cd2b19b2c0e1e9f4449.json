{"ast":null,"code":"var _jsxFileName = \"/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/ChatBox.js\",\n  _s = $RefreshSig$();\n// src/components/ChatBox.js\nimport React, { useState } from 'react';\nimport { sendMessageToAI } from './utils/GptAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const handleSendMessage = async () => {\n    if (newMessage.trim()) {\n      try {\n        const updatedMessages = [...messages, {\n          \"role\": \"user\",\n          \"content\": newMessage\n        }];\n        const responseText = await sendMessageToAI(updatedMessages);\n        setMessages([...updatedMessages, {\n          \"role\": \"system\",\n          \"content\": responseText\n        }]);\n        setNewMessage('');\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.role === \"user\" ? 'user-message' : 'ai-message',\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your message...\",\n      value: newMessage,\n      onChange: e => setNewMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"t/bJtz8T5owTIUv5OHFKDlj9m7s=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","sendMessageToAI","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","newMessage","setNewMessage","handleSendMessage","trim","updatedMessages","responseText","error","console","log","children","className","map","message","index","role","content","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/ChatBox.js"],"sourcesContent":["// src/components/ChatBox.js\nimport React, { useState } from 'react';\nimport { sendMessageToAI } from './utils/GptAPI';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n  const handleSendMessage = async () => {\n    if (newMessage.trim()) {\n      try {\n        const updatedMessages = [...messages, { \"role\": \"user\", \"content\": newMessage }];\n        const responseText = await sendMessageToAI(updatedMessages);\n        setMessages([...updatedMessages, { \"role\": \"system\", \"content\": responseText }]);\n        setNewMessage('');\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div key={index} className={message.role === \"user\" ? 'user-message' : 'ai-message'}>\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Type your message...\"\n        value={newMessage}\n        onChange={(e) => setNewMessage(e.target.value)}\n      />\n      <button className=\"chat-button\" onClick={handleSendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAIF,UAAU,CAACG,IAAI,CAAC,CAAC,EAAE;MACrB,IAAI;QACF,MAAMC,eAAe,GAAG,CAAC,GAAGN,QAAQ,EAAE;UAAE,MAAM,EAAE,MAAM;UAAE,SAAS,EAAEE;QAAW,CAAC,CAAC;QAChF,MAAMK,YAAY,GAAG,MAAMZ,eAAe,CAACW,eAAe,CAAC;QAC3DL,WAAW,CAAC,CAAC,GAAGK,eAAe,EAAE;UAAE,MAAM,EAAE,QAAQ;UAAE,SAAS,EAAEC;QAAa,CAAC,CAAC,CAAC;QAChFJ,aAAa,CAAC,EAAE,CAAC;MACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF;EACF,CAAC;EAED,oBACEX,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAKe,SAAS,EAAC,gBAAgB;MAAAD,QAAA,EAC5BX,QAAQ,CAACa,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BlB,OAAA;QAAiBe,SAAS,EAAEE,OAAO,CAACE,IAAI,KAAK,MAAM,GAAG,cAAc,GAAG,YAAa;QAAAL,QAAA,EACjFG,OAAO,CAACG;MAAO,GADRF,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNxB,OAAA;MACEyB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,sBAAsB;MAClCC,KAAK,EAAEtB,UAAW;MAClBuB,QAAQ,EAAGC,CAAC,IAAKvB,aAAa,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACFxB,OAAA;MAAQe,SAAS,EAAC,aAAa;MAACgB,OAAO,EAAExB,iBAAkB;MAAAO,QAAA,EAAC;IAAI;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtE,CAAC;AAEV,CAAC;AAACtB,EAAA,CAnCID,OAAO;AAAA+B,EAAA,GAAP/B,OAAO;AAqCb,eAAeA,OAAO;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}