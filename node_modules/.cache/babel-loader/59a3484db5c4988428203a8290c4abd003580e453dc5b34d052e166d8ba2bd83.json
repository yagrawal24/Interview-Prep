{"ast":null,"code":"var promises = require(\"../promises\");\nvar _ = require(\"underscore\");\nvar xmldom = require(\"./xmldom\");\nvar nodes = require(\"./nodes\");\nvar Element = nodes.Element;\nexports.readString = readString;\nvar Node = xmldom.Node;\nfunction readString(xmlString, namespaceMap) {\n  namespaceMap = namespaceMap || {};\n  try {\n    var document = xmldom.parseFromString(xmlString, \"text/xml\");\n  } catch (error) {\n    return promises.reject(error);\n  }\n  if (document.documentElement.tagName === \"parsererror\") {\n    return promises.resolve(new Error(document.documentElement.textContent));\n  }\n  function convertNode(node) {\n    switch (node.nodeType) {\n      case Node.ELEMENT_NODE:\n        return convertElement(node);\n      case Node.TEXT_NODE:\n        return nodes.text(node.nodeValue);\n    }\n  }\n  function convertElement(element) {\n    var convertedName = convertName(element);\n    var convertedChildren = [];\n    _.forEach(element.childNodes, function (childNode) {\n      var convertedNode = convertNode(childNode);\n      if (convertedNode) {\n        convertedChildren.push(convertedNode);\n      }\n    });\n    var convertedAttributes = {};\n    _.forEach(element.attributes, function (attribute) {\n      convertedAttributes[convertName(attribute)] = attribute.value;\n    });\n    return new Element(convertedName, convertedAttributes, convertedChildren);\n  }\n  function convertName(node) {\n    if (node.namespaceURI) {\n      var mappedPrefix = namespaceMap[node.namespaceURI];\n      var prefix;\n      if (mappedPrefix) {\n        prefix = mappedPrefix + \":\";\n      } else {\n        prefix = \"{\" + node.namespaceURI + \"}\";\n      }\n      return prefix + node.localName;\n    } else {\n      return node.localName;\n    }\n  }\n  return promises.resolve(convertNode(document.documentElement));\n}","map":{"version":3,"names":["promises","require","_","xmldom","nodes","Element","exports","readString","Node","xmlString","namespaceMap","document","parseFromString","error","reject","documentElement","tagName","resolve","Error","textContent","convertNode","node","nodeType","ELEMENT_NODE","convertElement","TEXT_NODE","text","nodeValue","element","convertedName","convertName","convertedChildren","forEach","childNodes","childNode","convertedNode","push","convertedAttributes","attributes","attribute","value","namespaceURI","mappedPrefix","prefix","localName"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/node_modules/mammoth/lib/xml/reader.js"],"sourcesContent":["var promises = require(\"../promises\");\nvar _ = require(\"underscore\");\n\nvar xmldom = require(\"./xmldom\");\nvar nodes = require(\"./nodes\");\nvar Element = nodes.Element;\n\nexports.readString = readString;\n\nvar Node = xmldom.Node;\n\nfunction readString(xmlString, namespaceMap) {\n    namespaceMap = namespaceMap || {};\n\n    try {\n        var document = xmldom.parseFromString(xmlString, \"text/xml\");\n    } catch (error) {\n        return promises.reject(error);\n    }\n\n    if (document.documentElement.tagName === \"parsererror\") {\n        return promises.resolve(new Error(document.documentElement.textContent));\n    }\n\n    function convertNode(node) {\n        switch (node.nodeType) {\n        case Node.ELEMENT_NODE:\n            return convertElement(node);\n        case Node.TEXT_NODE:\n            return nodes.text(node.nodeValue);\n        }\n    }\n\n    function convertElement(element) {\n        var convertedName = convertName(element);\n\n        var convertedChildren = [];\n        _.forEach(element.childNodes, function(childNode) {\n            var convertedNode = convertNode(childNode);\n            if (convertedNode) {\n                convertedChildren.push(convertedNode);\n            }\n        });\n\n        var convertedAttributes = {};\n        _.forEach(element.attributes, function(attribute) {\n            convertedAttributes[convertName(attribute)] = attribute.value;\n        });\n\n        return new Element(convertedName, convertedAttributes, convertedChildren);\n    }\n\n    function convertName(node) {\n        if (node.namespaceURI) {\n            var mappedPrefix = namespaceMap[node.namespaceURI];\n            var prefix;\n            if (mappedPrefix) {\n                prefix = mappedPrefix + \":\";\n            } else {\n                prefix = \"{\" + node.namespaceURI + \"}\";\n            }\n            return prefix + node.localName;\n        } else {\n            return node.localName;\n        }\n    }\n\n    return promises.resolve(convertNode(document.documentElement));\n}\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAa,CAAC;AACrC,IAAIC,CAAC,GAAGD,OAAO,CAAC,YAAY,CAAC;AAE7B,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIG,KAAK,GAAGH,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAII,OAAO,GAAGD,KAAK,CAACC,OAAO;AAE3BC,OAAO,CAACC,UAAU,GAAGA,UAAU;AAE/B,IAAIC,IAAI,GAAGL,MAAM,CAACK,IAAI;AAEtB,SAASD,UAAUA,CAACE,SAAS,EAAEC,YAAY,EAAE;EACzCA,YAAY,GAAGA,YAAY,IAAI,CAAC,CAAC;EAEjC,IAAI;IACA,IAAIC,QAAQ,GAAGR,MAAM,CAACS,eAAe,CAACH,SAAS,EAAE,UAAU,CAAC;EAChE,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZ,OAAOb,QAAQ,CAACc,MAAM,CAACD,KAAK,CAAC;EACjC;EAEA,IAAIF,QAAQ,CAACI,eAAe,CAACC,OAAO,KAAK,aAAa,EAAE;IACpD,OAAOhB,QAAQ,CAACiB,OAAO,CAAC,IAAIC,KAAK,CAACP,QAAQ,CAACI,eAAe,CAACI,WAAW,CAAC,CAAC;EAC5E;EAEA,SAASC,WAAWA,CAACC,IAAI,EAAE;IACvB,QAAQA,IAAI,CAACC,QAAQ;MACrB,KAAKd,IAAI,CAACe,YAAY;QAClB,OAAOC,cAAc,CAACH,IAAI,CAAC;MAC/B,KAAKb,IAAI,CAACiB,SAAS;QACf,OAAOrB,KAAK,CAACsB,IAAI,CAACL,IAAI,CAACM,SAAS,CAAC;IACrC;EACJ;EAEA,SAASH,cAAcA,CAACI,OAAO,EAAE;IAC7B,IAAIC,aAAa,GAAGC,WAAW,CAACF,OAAO,CAAC;IAExC,IAAIG,iBAAiB,GAAG,EAAE;IAC1B7B,CAAC,CAAC8B,OAAO,CAACJ,OAAO,CAACK,UAAU,EAAE,UAASC,SAAS,EAAE;MAC9C,IAAIC,aAAa,GAAGf,WAAW,CAACc,SAAS,CAAC;MAC1C,IAAIC,aAAa,EAAE;QACfJ,iBAAiB,CAACK,IAAI,CAACD,aAAa,CAAC;MACzC;IACJ,CAAC,CAAC;IAEF,IAAIE,mBAAmB,GAAG,CAAC,CAAC;IAC5BnC,CAAC,CAAC8B,OAAO,CAACJ,OAAO,CAACU,UAAU,EAAE,UAASC,SAAS,EAAE;MAC9CF,mBAAmB,CAACP,WAAW,CAACS,SAAS,CAAC,CAAC,GAAGA,SAAS,CAACC,KAAK;IACjE,CAAC,CAAC;IAEF,OAAO,IAAInC,OAAO,CAACwB,aAAa,EAAEQ,mBAAmB,EAAEN,iBAAiB,CAAC;EAC7E;EAEA,SAASD,WAAWA,CAACT,IAAI,EAAE;IACvB,IAAIA,IAAI,CAACoB,YAAY,EAAE;MACnB,IAAIC,YAAY,GAAGhC,YAAY,CAACW,IAAI,CAACoB,YAAY,CAAC;MAClD,IAAIE,MAAM;MACV,IAAID,YAAY,EAAE;QACdC,MAAM,GAAGD,YAAY,GAAG,GAAG;MAC/B,CAAC,MAAM;QACHC,MAAM,GAAG,GAAG,GAAGtB,IAAI,CAACoB,YAAY,GAAG,GAAG;MAC1C;MACA,OAAOE,MAAM,GAAGtB,IAAI,CAACuB,SAAS;IAClC,CAAC,MAAM;MACH,OAAOvB,IAAI,CAACuB,SAAS;IACzB;EACJ;EAEA,OAAO5C,QAAQ,CAACiB,OAAO,CAACG,WAAW,CAACT,QAAQ,CAACI,eAAe,CAAC,CAAC;AAClE"},"metadata":{},"sourceType":"script","externalDependencies":[]}