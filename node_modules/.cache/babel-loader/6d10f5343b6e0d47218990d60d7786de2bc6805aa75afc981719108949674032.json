{"ast":null,"code":"var _jsxFileName = \"/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/components/ResumeUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport mammoth from 'mammoth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResumeUpload = ({\n  setUserSpeech,\n  onUploadSuccess\n}) => {\n  _s();\n  const [docxFile, setDocxFile] = useState(null);\n  const [docxText, setDocxText] = useState('');\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file && file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n      setDocxFile(file);\n      const reader = new FileReader();\n      reader.onload = e => {\n        const arrayBuffer = e.target.result;\n        mammoth.extractRawText({\n          arrayBuffer: arrayBuffer\n        }).then(result => {\n          setDocxText(result.value);\n        }).catch(error => {\n          console.error('Error parsing .docx file:', error);\n        });\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  };\n  const handleSubmit = () => {\n    console.log(docxText);\n    alert('Text data is logged to the console.');\n    setUserSpeech(docxText);\n    onUploadSuccess(); // Call the callback after successful upload\n  };\n\n  console.log(\"Resume upload page is loading\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".docx\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), docxFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Document\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ResumeUpload, \"DTElWJBOM3uP6lhAbrPXCecd9xo=\");\n_c = ResumeUpload;\nexport default ResumeUpload;\nvar _c;\n$RefreshReg$(_c, \"ResumeUpload\");","map":{"version":3,"names":["React","useState","useRef","useEffect","mammoth","jsxDEV","_jsxDEV","ResumeUpload","setUserSpeech","onUploadSuccess","_s","docxFile","setDocxFile","docxText","setDocxText","handleFileChange","event","file","target","files","type","reader","FileReader","onload","e","arrayBuffer","result","extractRawText","then","value","catch","error","console","readAsArrayBuffer","handleSubmit","log","alert","children","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/components/ResumeUpload.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport mammoth from 'mammoth';\n\nconst ResumeUpload = ({setUserSpeech, onUploadSuccess}) => {\n  const [docxFile, setDocxFile] = useState(null);\n  const [docxText, setDocxText] = useState('');\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n    if (file && file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n      setDocxFile(file);\n      const reader = new FileReader();\n\n      reader.onload = (e) => {\n        const arrayBuffer = e.target.result;\n\n        mammoth.extractRawText({ arrayBuffer: arrayBuffer })\n          .then((result) => {\n            setDocxText(result.value); \n          })\n          .catch((error) => {\n            console.error('Error parsing .docx file:', error);\n          });\n      };\n\n      reader.readAsArrayBuffer(file);\n    }\n  };\n\n  const handleSubmit = () => {\n    console.log(docxText);\n    alert('Text data is logged to the console.');\n    setUserSpeech(docxText);\n    onUploadSuccess(); // Call the callback after successful upload\n  };\n\n  console.log(\"Resume upload page is loading\");\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".docx\" onChange={handleFileChange} />\n      {docxFile && (\n        <div>\n          <button onClick={handleSubmit}>Submit Document</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ResumeUpload;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,YAAY,GAAGA,CAAC;EAACC,aAAa;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMc,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,IAAIA,IAAI,CAACG,IAAI,KAAK,yEAAyE,EAAE;MACnGR,WAAW,CAACK,IAAI,CAAC;MACjB,MAAMI,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAE/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;QACrB,MAAMC,WAAW,GAAGD,CAAC,CAACN,MAAM,CAACQ,MAAM;QAEnCtB,OAAO,CAACuB,cAAc,CAAC;UAAEF,WAAW,EAAEA;QAAY,CAAC,CAAC,CACjDG,IAAI,CAAEF,MAAM,IAAK;UAChBZ,WAAW,CAACY,MAAM,CAACG,KAAK,CAAC;QAC3B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;UAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD,CAAC,CAAC;MACN,CAAC;MAEDV,MAAM,CAACY,iBAAiB,CAAChB,IAAI,CAAC;IAChC;EACF,CAAC;EAED,MAAMiB,YAAY,GAAGA,CAAA,KAAM;IACzBF,OAAO,CAACG,GAAG,CAACtB,QAAQ,CAAC;IACrBuB,KAAK,CAAC,qCAAqC,CAAC;IAC5C5B,aAAa,CAACK,QAAQ,CAAC;IACvBJ,eAAe,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC;;EAEDuB,OAAO,CAACG,GAAG,CAAC,+BAA+B,CAAC;EAE5C,oBACE7B,OAAA;IAAA+B,QAAA,gBACE/B,OAAA;MAAOc,IAAI,EAAC,MAAM;MAACkB,MAAM,EAAC,OAAO;MAACC,QAAQ,EAAExB;IAAiB;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC/DhC,QAAQ,iBACPL,OAAA;MAAA+B,QAAA,eACE/B,OAAA;QAAQsC,OAAO,EAAEV,YAAa;QAAAG,QAAA,EAAC;MAAe;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjC,EAAA,CA7CIH,YAAY;AAAAsC,EAAA,GAAZtC,YAAY;AA+ClB,eAAeA,YAAY;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}