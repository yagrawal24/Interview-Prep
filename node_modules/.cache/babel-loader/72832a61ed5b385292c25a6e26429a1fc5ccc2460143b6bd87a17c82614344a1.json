{"ast":null,"code":"exports.uriToZipEntryName = uriToZipEntryName;\nexports.replaceFragment = replaceFragment;\nfunction uriToZipEntryName(base, uri) {\n  if (uri.charAt(0) === \"/\") {\n    return uri.substr(1);\n  } else {\n    // In general, we should check first and second for trailing and leading slashes,\n    // but in our specific case this seems to be sufficient\n    return base + \"/\" + uri;\n  }\n}\nfunction replaceFragment(uri, fragment) {\n  var hashIndex = uri.indexOf(\"#\");\n  if (hashIndex !== -1) {\n    uri = uri.substring(0, hashIndex);\n  }\n  return uri + \"#\" + fragment;\n}","map":{"version":3,"names":["exports","uriToZipEntryName","replaceFragment","base","uri","charAt","substr","fragment","hashIndex","indexOf","substring"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/node_modules/mammoth/lib/docx/uris.js"],"sourcesContent":["exports.uriToZipEntryName = uriToZipEntryName;\nexports.replaceFragment = replaceFragment;\n\nfunction uriToZipEntryName(base, uri) {\n    if (uri.charAt(0) === \"/\") {\n        return uri.substr(1);\n    } else {\n        // In general, we should check first and second for trailing and leading slashes,\n        // but in our specific case this seems to be sufficient\n        return base + \"/\" + uri;\n    }\n}\n\n\nfunction replaceFragment(uri, fragment) {\n    var hashIndex = uri.indexOf(\"#\");\n    if (hashIndex !== -1) {\n        uri = uri.substring(0, hashIndex);\n    }\n    return uri + \"#\" + fragment;\n}\n"],"mappings":"AAAAA,OAAO,CAACC,iBAAiB,GAAGA,iBAAiB;AAC7CD,OAAO,CAACE,eAAe,GAAGA,eAAe;AAEzC,SAASD,iBAAiBA,CAACE,IAAI,EAAEC,GAAG,EAAE;EAClC,IAAIA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACvB,OAAOD,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC;EACxB,CAAC,MAAM;IACH;IACA;IACA,OAAOH,IAAI,GAAG,GAAG,GAAGC,GAAG;EAC3B;AACJ;AAGA,SAASF,eAAeA,CAACE,GAAG,EAAEG,QAAQ,EAAE;EACpC,IAAIC,SAAS,GAAGJ,GAAG,CAACK,OAAO,CAAC,GAAG,CAAC;EAChC,IAAID,SAAS,KAAK,CAAC,CAAC,EAAE;IAClBJ,GAAG,GAAGA,GAAG,CAACM,SAAS,CAAC,CAAC,EAAEF,SAAS,CAAC;EACrC;EACA,OAAOJ,GAAG,GAAG,GAAG,GAAGG,QAAQ;AAC/B"},"metadata":{},"sourceType":"script","externalDependencies":[]}