{"ast":null,"code":"import axios from 'axios';\nrequire('dotenv').config();\nconst apiKey = process.env.GPT_API_KEY;\nprint(apiKey);\nconst sendMessageToAI = async message => {\n  try {\n    const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n      \"messages\": message,\n      max_tokens: 50,\n      model: 'gpt-3.5-turbo'\n    }, {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const responseText = response.data.choices[0].message.content;\n    console.log(responseText);\n    return responseText;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('Error sending message to OpenAI API:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n    throw error;\n  }\n};\nexport { sendMessageToAI };","map":{"version":3,"names":["axios","require","config","apiKey","process","env","GPT_API_KEY","print","sendMessageToAI","message","response","post","max_tokens","model","headers","responseText","data","choices","content","console","log","error","_error$response","_error$response2","status"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/utils/GptAPI.js"],"sourcesContent":["import axios from 'axios';\n\nrequire('dotenv').config();\n\nconst apiKey = process.env.GPT_API_KEY;\n\nprint(apiKey)\n\nconst sendMessageToAI = async (message) => {\n  try {\n    const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n      \"messages\": message,\n      max_tokens: 50,\n      model: 'gpt-3.5-turbo'\n    }, {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const responseText = response.data.choices[0].message.content;\n    console.log(responseText)\n    return responseText;\n  } catch (error) {\n    console.error('Error sending message to OpenAI API:', error.response?.status, error.response?.data);\n    throw error;\n  }\n};\n\nexport { sendMessageToAI };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBC,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAE1B,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,WAAW;AAEtCC,KAAK,CAACJ,MAAM,CAAC;AAEb,MAAMK,eAAe,GAAG,MAAOC,OAAO,IAAK;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,4CAA4C,EAAE;MAC9E,UAAU,EAAEF,OAAO;MACnBG,UAAU,EAAE,EAAE;MACdC,KAAK,EAAE;IACT,CAAC,EAAE;MACDC,OAAO,EAAE;QACP,eAAe,EAAG,UAASX,MAAO,EAAC;QACnC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,MAAMY,YAAY,GAAGL,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACR,OAAO,CAACS,OAAO;IAC7DC,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOA,YAAY;EACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA;IACdJ,OAAO,CAACE,KAAK,CAAC,sCAAsC,GAAAC,eAAA,GAAED,KAAK,CAACX,QAAQ,cAAAY,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,GAAAD,gBAAA,GAAEF,KAAK,CAACX,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgBP,IAAI,CAAC;IACnG,MAAMK,KAAK;EACb;AACF,CAAC;AAED,SAASb,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}