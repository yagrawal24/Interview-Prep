{"ast":null,"code":"var _jsxFileName = \"/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/ChatBox.js\",\n  _s = $RefreshSig$();\n// src/components/ChatBox.js\nimport React, { useState } from 'react';\nimport { sendMessageToAI } from './utils/GptAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  useEffect(() => {\n    const initialContext = {\n      \"role\": \"system\",\n      \"content\": \"You are acting as an interviewer for a software engineering role. Please ask a behavioral focused question.\"\n    };\n    setMessages([initialContext]);\n    gptCall(initialContext);\n  }, []);\n  const gptCall = async newContent => {\n    try {\n      const updatedMessages = [...messages, {\n        \"role\": \"user\",\n        \"content\": newContent\n      }];\n      const responseText = await sendMessageToAI(updatedMessages);\n      setMessages([...updatedMessages, {\n        \"role\": \"system\",\n        \"content\": responseText\n      }]);\n      setNewMessage('');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (newMessage.trim()) {\n      gptCall(newMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.role === \"user\" ? 'user-message' : 'ai-message',\n        children: message.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your message...\",\n      value: newMessage,\n      onChange: e => setNewMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"ppYy//Iy9fHF0/R/fKleZlFUFyc=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","sendMessageToAI","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","newMessage","setNewMessage","useEffect","initialContext","gptCall","newContent","updatedMessages","responseText","error","console","log","handleSendMessage","trim","children","className","map","message","index","role","content","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/yashagrawal/Documents/Northwestern/Fall2023/CS338/InterviewPrep/src/ChatBox.js"],"sourcesContent":["// src/components/ChatBox.js\nimport React, { useState } from 'react';\nimport { sendMessageToAI } from './utils/GptAPI';\n\nconst ChatBox = () => {\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n\n\n  useEffect(() => {\n    const initialContext = {\n      \"role\": \"system\",\n      \"content\": \"You are acting as an interviewer for a software engineering role. Please ask a behavioral focused question.\"\n    };\n    setMessages([initialContext]);\n    gptCall(initialContext);\n  }, []);\n\n  const gptCall = async (newContent) => {\n    try {\n      const updatedMessages = [...messages, { \"role\": \"user\", \"content\": newContent }];\n      const responseText = await sendMessageToAI(updatedMessages);\n      setMessages([...updatedMessages, { \"role\": \"system\", \"content\": responseText }]);\n      setNewMessage('');\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const handleSendMessage = async () => {\n    if (newMessage.trim()) {\n      gptCall(newMessage)\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"chat-container\">\n        {messages.map((message, index) => (\n          <div key={index} className={message.role === \"user\" ? 'user-message' : 'ai-message'}>\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Type your message...\"\n        value={newMessage}\n        onChange={(e) => setNewMessage(e.target.value)}\n      />\n      <button className=\"chat-button\" onClick={handleSendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAGhDU,SAAS,CAAC,MAAM;IACd,MAAMC,cAAc,GAAG;MACrB,MAAM,EAAE,QAAQ;MAChB,SAAS,EAAE;IACb,CAAC;IACDJ,WAAW,CAAC,CAACI,cAAc,CAAC,CAAC;IAC7BC,OAAO,CAACD,cAAc,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,OAAO,GAAG,MAAOC,UAAU,IAAK;IACpC,IAAI;MACF,MAAMC,eAAe,GAAG,CAAC,GAAGR,QAAQ,EAAE;QAAE,MAAM,EAAE,MAAM;QAAE,SAAS,EAAEO;MAAW,CAAC,CAAC;MAChF,MAAME,YAAY,GAAG,MAAMd,eAAe,CAACa,eAAe,CAAC;MAC3DP,WAAW,CAAC,CAAC,GAAGO,eAAe,EAAE;QAAE,MAAM,EAAE,QAAQ;QAAE,SAAS,EAAEC;MAAa,CAAC,CAAC,CAAC;MAChFN,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMG,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAIX,UAAU,CAACY,IAAI,CAAC,CAAC,EAAE;MACrBR,OAAO,CAACJ,UAAU,CAAC;IACrB;EACF,CAAC;EAED,oBACEL,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAKmB,SAAS,EAAC,gBAAgB;MAAAD,QAAA,EAC5Bf,QAAQ,CAACiB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BtB,OAAA;QAAiBmB,SAAS,EAAEE,OAAO,CAACE,IAAI,KAAK,MAAM,GAAG,cAAc,GAAG,YAAa;QAAAL,QAAA,EACjFG,OAAO,CAACG;MAAO,GADRF,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN5B,OAAA;MACE6B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,sBAAsB;MAClCC,KAAK,EAAE1B,UAAW;MAClB2B,QAAQ,EAAGC,CAAC,IAAK3B,aAAa,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACF5B,OAAA;MAAQmB,SAAS,EAAC,aAAa;MAACgB,OAAO,EAAEnB,iBAAkB;MAAAE,QAAA,EAAC;IAAI;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAjDID,OAAO;AAAAmC,EAAA,GAAPnC,OAAO;AAmDb,eAAeA,OAAO;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}